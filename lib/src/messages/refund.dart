// ignore_for_file: constant_identifier_names

part of '../../messages.dart';

enum RefundObject { refund }

enum RefundReason {
  duplicate,
  fraudulent,
  requested_by_customer,
  expired_uncaptured_chargem
}

/// https://docs.stripe.com/api/refunds/object
@JsonSerializable()
class Refund extends Message {
  /// String representing the object's type. Objects of the same type share the same value.
  final RefundObject object;

  /// Unique identifier for the object.
  final String id;

  /// Amount, in cents (or local equivalent).
  final int amount;

  /// Balance transaction that describes the impact on your account balance.
  final String? balanceTransaction;

  /// ID of the charge that's refunded.
  final String? charge;

  /// Time at which the object was created. Measured in seconds since the Unix epoch.
  final int created;

  /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  final String currency;

  /// An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
  final String? description;

  /// After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
  final String? failureBalanceTransaction;

  /// Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
  final String? failureReason;

  /// For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
  final String? instructionsEmail;

  /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  final Map<String, dynamic>? metadata;

  /// ID of the PaymentIntent that's refunded.
  final String? paymentIntent;

  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  final RefundReason? reason;

  /// This is the transaction number that appears on email receipts sent for this refund.
  final String? receiptNumber;

  /// The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account.
  final String? sourceTransferReversal;

  /// Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
  final String? status;

  /// This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.
  final String? transferReversal;

  factory Refund.fromJson(Map<String, dynamic> json) => _$RefundFromJson(json);

  Refund(
      {required this.object,
      required this.id,
      required this.amount,
      this.balanceTransaction,
      this.charge,
      required this.created,
      required this.currency,
      this.description,
      this.failureBalanceTransaction,
      this.failureReason,
      this.instructionsEmail,
      this.metadata,
      this.paymentIntent,
      this.reason,
      this.receiptNumber,
      this.sourceTransferReversal,
      this.status,
      this.transferReversal});

  @override
  Map<String, dynamic> toJson() => _$RefundToJson(this);
}
